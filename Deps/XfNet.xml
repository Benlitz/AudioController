<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XfNet</name>
    </assembly>
    <members>
        <member name="T:XfNet.DictionaryExtensions">
            <summary>
            This static class contains extension methods that can be used on <see cref="!:IDictionary&lt;T&gt;"/> instances.
            </summary>
        </member>
        <member name="M:XfNet.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Adds the entries contained in the given sequence to the given dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys contained in the dictionary and the sequence of entries.</typeparam>
            <typeparam name="TValue">The type of the values contained in the dictionary and the sequence of entries.</typeparam>
            <param name="dictionary">The dictionary in which to add entries.</param>
            <param name="entries">The entries to add to the dictionary.</param>
        </member>
        <member name="M:XfNet.DictionaryExtensions.Merge``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Merges the entries contained in the given sequence into the given dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys contained in the dictionary and the sequence of entries.</typeparam>
            <typeparam name="TValue">The type of the values contained in the dictionary and the sequence of entries.</typeparam>
            <param name="dictionary">The dictionary in which to add entries.</param>
            <param name="entries">The entries to merge into the dictionary.</param>
        </member>
        <member name="T:XfNet.EnumerableExtensions">
            <summary>
            This static class contains extension methods that can be used on <see cref="T:System.Collections.Generic.IEnumerable`1"/> instances.
            </summary>
        </member>
        <member name="M:XfNet.EnumerableExtensions.Foreach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an action for each element of the given sequence.
            </summary>
            <typeparam name="T">The type of objects in the sequence.</typeparam>
            <param name="enumerable">The sequence to enumerate.</param>
            <param name="action">The action to execute on each item.</param>
        </member>
        <member name="M:XfNet.EnumerableExtensions.NotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a sequence of values by excluding values that are <c>null</c>.
            </summary>
            <typeparam name="T">The type of objects in the sequence.</typeparam>
            <param name="enumerable">The sequence to filter.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the non-null values from the given sequence.</returns>
        </member>
        <member name="T:XfNet.ExceptionExtensions">
            <summary>
            This static class contains extension methods that can be used on <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:XfNet.ExceptionExtensions.Ignore(System.Exception)">
            <summary>
            Ignores explicitly the exception. This method does nothing but suppress warnings related to a catch block doing nothing.
            </summary>
            <param name="exception">The exception to ignore.</param>
        </member>
        <member name="T:XfNet.ObjectExtensions">
            <summary>
            This static class contains extension methods that can be used on any object.
            </summary>
        </member>
        <member name="M:XfNet.ObjectExtensions.SafeArg``1(``0,System.String)">
            <summary>
            Checks that the given object is not null, and throws an exception otherwise.
            </summary>
            <typeparam name="T">The type of the object to check.</typeparam>
            <param name="obj">The object to check.</param>
            <param name="argumentName">The name of the argument containg the object to check.</param>
            <returns>The given object itself.</returns>
            <exception cref="T:System.ArgumentNullException">The given object is null.</exception>
        </member>
        <member name="M:XfNet.ObjectExtensions.Yield``1(``0)">
            <summary>
            Returns a sequence of values containing only the given object.
            </summary>
            <param name="obj">The object to yield.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance containing the given object.</returns>
            <remarks>This method uses <c>yield return</c> to return an <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance.</remarks>
        </member>
        <member name="T:XfNet.TypeExtensions">
            <summary>
            This static class contains extension methods that can be used on <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:XfNet.TypeExtensions.IsInstanceAssignable(System.Type,System.Object)">
            <summary>
            Indicates whether the given object can be assigned to a reference of the given type.
            </summary>
            <param name="type">The type to match.</param>
            <param name="value">The object to check.</param>
            <returns><c>true</c> if <see cref="!:value"/> is an instance of the given <see cref="T:System.Type"/>, or if the type is not a value type and the value is null. Otherwise, <c>false</c></returns>
        </member>
        <member name="M:XfNet.TypeExtensions.IsNumeric(System.Type)">
            <summary>
            Indicates whether the given type is a primitive numeric type, signed or unsigned, integer or floating-point.
            </summary>
            <param name="type">The type to check.</param>
            <returns><c>true</c> if <paramref name="type"/> is a numeric type, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:XfNet.ColorHelper">
            <summary>
            This static class contains helper methods related to colors.
            </summary>
        </member>
        <member name="M:XfNet.ColorHelper.Hue(System.Byte,System.Byte,System.Byte)">
            <summary>
            Computes the hue of the given color.
            </summary>
            <param name="r">The red component of the color.</param>
            <param name="g">The green component of the color.</param>
            <param name="b">The blue component of the color.</param>
            <returns>The hue of the given color.</returns>
        </member>
        <member name="T:XfNet.MathHelper">
            <summary>
            This static class contains helper methods related to mathematics.
            </summary>
        </member>
        <member name="M:XfNet.MathHelper.Round(System.Double)">
            <summary>
            Rounds the given <see cref="T:System.Double"/> value to the nearest integer using <see cref="F:System.MidpointRounding.AwayFromZero"/>
            mode if the value is midway between two other numbers.
            </summary>
            <param name="value">The value to round.</param>
            <returns>The value rounded to the nearest integer.</returns>
        </member>
        <member name="M:XfNet.MathHelper.Swap(System.Byte@,System.Byte@)">
            <summary>
            Swaps the value of two <see cref="T:System.Byte"/> variables.
            </summary>
            <param name="a">The first value to swap.</param>
            <param name="b">The second value to swap.</param>
        </member>
        <member name="M:XfNet.MathHelper.Swap(System.SByte@,System.SByte@)">
            <summary>
            Swaps the value of two <see cref="T:System.SByte"/> variables.
            </summary>
            <param name="a">The first value to swap.</param>
            <param name="b">The second value to swap.</param>
        </member>
        <member name="M:XfNet.MathHelper.Swap(System.Int16@,System.Int16@)">
            <summary>
            Swaps the value of two <see cref="T:System.Int16"/> variables.
            </summary>
            <param name="a">The first value to swap.</param>
            <param name="b">The second value to swap.</param>
        </member>
        <member name="M:XfNet.MathHelper.Swap(System.UInt16@,System.UInt16@)">
            <summary>
            Swaps the value of two <see cref="T:System.UInt16"/> variables.
            </summary>
            <param name="a">The first value to swap.</param>
            <param name="b">The second value to swap.</param>
        </member>
        <member name="M:XfNet.MathHelper.Swap(System.Int32@,System.Int32@)">
            <summary>
            Swaps the value of two <see cref="T:System.Int32"/> variables.
            </summary>
            <param name="a">The first value to swap.</param>
            <param name="b">The second value to swap.</param>
        </member>
        <member name="M:XfNet.MathHelper.Swap(System.UInt32@,System.UInt32@)">
            <summary>
            Swaps the value of two <see cref="T:System.UInt32"/> variables.
            </summary>
            <param name="a">The first value to swap.</param>
            <param name="b">The second value to swap.</param>
        </member>
        <member name="M:XfNet.MathHelper.Swap(System.Int64@,System.Int64@)">
            <summary>
            Swaps the value of two <see cref="T:System.Int64"/> variables.
            </summary>
            <param name="a">The first value to swap.</param>
            <param name="b">The second value to swap.</param>
        </member>
        <member name="M:XfNet.MathHelper.Swap(System.UInt64@,System.UInt64@)">
            <summary>
            Swaps the value of two <see cref="T:System.UInt64"/> variables.
            </summary>
            <param name="a">The first value to swap.</param>
            <param name="b">The second value to swap.</param>
        </member>
    </members>
</doc>
